<?php

/**
 * @file
 * This file handles all the install & uninstall features.
 */

/**
 * Implements hook_requirements().
 */
function password_encrypt_requirements($phase) {
  $requirements = [];
  if ($phase == 'runtime') {
    // Ensure translations do not break at install time.
    $t = get_t();
    $requirements['password_encrypt']['title'] = $t('Password Encrypt requirements');

    if (module_exists('libraries') && function_exists('libraries_get_libraries')) {
      $library = libraries_get_libraries();
      $password_encrypt_installed = (isset($library['CryptoJS'])) ? TRUE : FALSE;
    }
    elseif (file_exists('sites/all/libraries/CryptoJS/aes.js') || file_exists('sites/all/libraries/CryptoJS/aes-json-format.js')) {
      $password_encrypt_installed = TRUE;
    }
    else {
      $password_encrypt_installed = FALSE;
    }

    if ($password_encrypt_installed && function_exists('openssl_decrypt')) {
      $requirements['password_encrypt']['value'] = $t('Exists');
      $requirements['password_encrypt']['severity'] = REQUIREMENT_OK;
    }
    else {
      $requirements['password_encrypt']['value'] = $t('OpenSSL/CryptoJS library is not installed');
      $requirements['password_encrypt']['severity'] = REQUIREMENT_ERROR;
      $requirements['password_encrypt']['description'] = $t('Either OpenSSL extension or CryptoJS library is not installed. Please check.<br>Please download <a href="@crypto" target="_blank">CryptoJS library</a> and <a href="@aes_json_formatter" target="_blank">AES JSON formatter for CryptoJS</a> to function correctly.<br>Unzip CryptoJS library and copy aes.js to sites/all/libraries/CryptoJS.<br>Copy aes-json-formatter.js file in sites/all/libraries/CryptoJS.', ['@crypto' => url('https://code.google.com/archive/p/crypto-js/downloads'), '@aes_json_formatter' => url('https://github.com/brainfoolong/cryptojs-aes-php/blob/master/aes-json-format.js')]);
    }
  }
  return $requirements;
}

/**
 * Implements hook_install().
 */
function password_encrypt_install() {
  variable_set('password_encrypt_passkey', bin2hex(openssl_random_pseudo_bytes(16)));
}

/**
 * Implements hook_uninstall().
 */
function password_encrypt_uninstall() {
  variable_del('password_encrypt_passkey');
}
